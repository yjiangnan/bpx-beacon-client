name: ðŸ“¦ðŸš€ Build Installer - Linux DEB AMD64

on:
  push:
    branches:
      - main
      - dev
      - 'release/**'
    tags:
      - '**'
  release:
    types: [published]
  pull_request:
    branches:
      - '**'

concurrency:
  # SHA is added to the end if on `main` to let all main workflows run
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}-${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/heads/release/')) && github.sha || '' }}
  cancel-in-progress: true

jobs:
  build:
    name: Linux amd64 DEB Installer
    runs-on: ubuntu-latest
    container: chianetwork/ubuntu-18.04-builder:latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version: [3.8]

    steps:
    - uses: bpx-network/bpx-beacon-client/.github/actions/clean-workspace@main

    - name: Add safe git directory
      uses: bpx-network/bpx-beacon-client/.github/actions/git-mark-workspace-safe@main

    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive

    - uses: ./.github/actions/git-ssh-to-https

    - name: Cleanup any leftovers that exist from previous runs
      run: bash build_scripts/clean-runner.sh || true

    - name: Set Env
      uses: ./.github/actions/setjobenv
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Create our own venv outside of the git directory JUST for getting the ACTUAL version so that install can't break it
    - name: Get version number
      id: version_number
      run: |
        python3 -m venv ../venv
        . ../venv/bin/activate
        pip3 install setuptools_scm
        echo "BPX_INSTALLER_VERSION=$(python3 ./build_scripts/installer-version.py)" >>$GITHUB_OUTPUT
        deactivate

    - name: Get latest madmax plotter
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        LATEST_MADMAX=$(gh api repos/Chia-Network/chia-plotter-madmax/releases/latest --jq 'select(.prerelease == false) | .tag_name')
        mkdir "$GITHUB_WORKSPACE/madmax"
        gh release download -R Chia-Network/chia-plotter-madmax $LATEST_MADMAX -p 'chia_plot-*-x86-64' -O $GITHUB_WORKSPACE/madmax/chia_plot
        gh release download -R Chia-Network/chia-plotter-madmax $LATEST_MADMAX -p 'chia_plot_k34-*-x86-64' -O $GITHUB_WORKSPACE/madmax/chia_plot_k34
        chmod +x "$GITHUB_WORKSPACE/madmax/chia_plot"
        chmod +x "$GITHUB_WORKSPACE/madmax/chia_plot_k34"

    - name: Get latest bladebit plotter
      if: env.RELEASE == 'true' && '!github.event.release.prerelease'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        LATEST_BLADEBIT=$(gh api repos/Chia-Network/bladebit/releases/latest --jq 'select(.prerelease == false) | .tag_name')
        mkdir "$GITHUB_WORKSPACE/bladebit"
        gh release download -R Chia-Network/bladebit $LATEST_BLADEBIT -p '*-ubuntu-x86-64.tar.gz' -O - | tar -xz -C $GITHUB_WORKSPACE/bladebit
        chmod +x "$GITHUB_WORKSPACE/bladebit/bladebit"

    - name: Get latest prerelease bladebit plotter
      if: env.RELEASE == 'false' || env.PRE_RELEASE == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        LATEST_PRERELEASE=$(gh api repos/Chia-Network/bladebit/releases --jq 'map(select(.prerelease)) | first | .tag_name')
        mkdir "$GITHUB_WORKSPACE/bladebit"
        gh release download -R Chia-Network/bladebit $LATEST_PRERELEASE -p '*ubuntu-x86-64.tar.gz' -O - | tar -xz -C $GITHUB_WORKSPACE/bladebit
        chmod +x "$GITHUB_WORKSPACE/bladebit/bladebit"

    - uses: ./.github/actions/install
      with:
        python-version: ${{ matrix.python-version }}
        development: true

    - uses: ./.github/actions/activate-venv

    - name: Prepare GUI cache
      id: gui-ref
      run: |
        gui_ref=$(git submodule status bpx-gui | sed -e 's/^ //g' -e 's/ bpx-gui.*$//g')
        echo "${gui_ref}"
        echo "GUI_REF=${gui_ref}" >>$GITHUB_OUTPUT
        echo "rm -rf ./bpx-gui"
        rm -rf ./bpx-gui

    - name: Cache GUI
      uses: actions/cache@v3
      id: cache-gui
      with:
        path: ./bpx-gui
        key: ${{ runner.os }}-deb-bpx-gui-${{ steps.gui-ref.outputs.GUI_REF }}

    - if: steps.cache-gui.outputs.cache-hit != 'true'
      name: Build GUI
      continue-on-error: false
      run: |
        cd ./build_scripts
        bash build_linux_deb-1-gui.sh

    - name: Build .deb package
      env:
        BPX_INSTALLER_VERSION: ${{ steps.version_number.outputs.BPX_INSTALLER_VERSION }}
      run: |
        ldd --version
        cd ./build_scripts
        sh build_linux_deb-2-installer.sh amd64

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v3
      with:
        name: bpx-installers-linux-deb-intel
        path: ${{ github.workspace }}/build_scripts/final_installer/

    - name: Get tag name
      if: startsWith(github.ref, 'refs/tags/')
      id: tag-name
      run: |
        echo "TAG_NAME=$(echo ${{ github.ref }} | cut -d'/' -f 3)" >>$GITHUB_OUTPUT
        echo "REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f 2)" >>$GITHUB_OUTPUT

    - name: Upload release artifacts
      if: env.RELEASE == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BPX_INSTALLER_VERSION: ${{ steps.version_number.outputs.BPX_INSTALLER_VERSION }}
      run: |
        gh release upload \
          $RELEASE_TAG \
          build_scripts/final_installer/bpx-beacon-client_${BPX_INSTALLER_VERSION}-1_amd64.deb \
          build_scripts/final_installer/bpx-beacon-client-cli_${BPX_INSTALLER_VERSION}-1_amd64.deb

    - name: Remove working files to exclude from cache
      run: |
        rm -rf ./bpx-gui/packages/gui/daemon
