name: ðŸ“¦ðŸš€ Build Installer - Windows 10

on:
  push:
    branches:
      - main
      - dev
      - 'release/**'
    tags:
      - '**'
  release:
    types: [published]
  pull_request:
    branches:
      - '**'

concurrency:
  # SHA is added to the end if on `main` to let all main workflows run
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}-${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/heads/release/')) && github.sha || '' }}
  cancel-in-progress: true

jobs:
  build:
    name: Windows 10 Installer
    runs-on: [windows-2019]
    timeout-minutes: 50
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Set Env
      uses: ./.github/actions/setjobenv
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Set git urls to https instead of ssh
      run: |
        git config --global url."https://github.com/".insteadOf ssh://git@github.com/

    - name: Get npm cache directory
      id: npm-cache
      shell: bash
      run: |
        echo "dir=$(npm config get cache)" >>$GITHUB_OUTPUT

    - name: Cache npm
      uses: actions/cache@v3
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Get pip cache dir
      id: pip-cache
      shell: bash
      run: |
        echo "dir=$(pip cache dir)" >>$GITHUB_OUTPUT

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: ./.github/actions/setup-python
      name: Install Python ${{ matrix.python-version }}
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup Node 16.x
      uses: actions/setup-node@v3
      with:
        node-version: '16.x'

    # Create our own venv outside of the git directory JUST for getting the ACTUAL version so that install can't break it
    - name: Get version number
      id: version_number
      shell: bash
      run: |
        python -m venv ../venv
        source ../venv/Scripts/activate
        pip3 install setuptools_scm
        BPX_INSTALLER_VERSION=$(python ./build_scripts/installer-version.py)
        echo "$BPX_INSTALLER_VERSION"
        echo "BPX_INSTALLER_VERSION=$BPX_INSTALLER_VERSION" >>$GITHUB_OUTPUT
        deactivate

    - name: Get latest madmax plotter
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
      run: |
        LATEST_MADMAX=$(gh api repos/Chia-Network/chia-plotter-madmax/releases/latest --jq 'select(.prerelease == false) | .tag_name')
        mkdir $GITHUB_WORKSPACE\\madmax
        gh release download -R Chia-Network/chia-plotter-madmax $LATEST_MADMAX -p 'chia_plot-*.exe' -O $GITHUB_WORKSPACE\\madmax\\chia_plot.exe
        gh release download -R Chia-Network/chia-plotter-madmax $LATEST_MADMAX -p 'chia_plot_k34-*.exe' -O $GITHUB_WORKSPACE\\madmax\\chia_plot_k34.exe

    - name: Get latest bladebit plotter
      if: env.RELEASE == 'true' && env.PRE_RELEASE != 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
      run: |
        LATEST_BLADEBIT=$(gh api repos/Chia-Network/bladebit/releases/latest --jq 'select(.prerelease == false) | .tag_name')
        mkdir $GITHUB_WORKSPACE\\bladebit
        cd $GITHUB_WORKSPACE\\bladebit
        gh release download -R Chia-Network/bladebit $LATEST_BLADEBIT -p 'bladebit*windows-x86-64.zip'
        ls *.zip | xargs -I{} bash -c 'unzip {} && rm {}'
        cd $OLDPWD

    - name: Get latest prerelease bladebit plotter
      if: env.RELEASE != 'true' || env.PRE_RELEASE == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
      run: |
        LATEST_PRERELEASE=$(gh api repos/Chia-Network/bladebit/releases --jq 'map(select(.prerelease)) | first | .tag_name')
        mkdir $GITHUB_WORKSPACE\\bladebit
        cd $GITHUB_WORKSPACE\\bladebit
        gh release download -R Chia-Network/bladebit $LATEST_PRERELEASE -p 'bladebit*windows-x86-64.zip'
        ls *.zip | xargs -I{} bash -c 'unzip {} && rm {}'
        cd $OLDPWD

    - name: Run install script
      env:
        INSTALL_PYTHON_VERSION: ${{ matrix.python-version }}
      run: |
        .\Install.ps1 -d

    - uses: ./.github/actions/activate-venv

    - name: Prepare GUI cache
      id: gui-ref
      shell: bash
      run: |
        gui_ref=$(git submodule status bpx-gui | sed -e 's/^ //g' -e 's/ bpx-gui.*$//g')
        echo "${gui_ref}"
        echo "GUI_REF=${gui_ref}" >>$GITHUB_OUTPUT
        echo "rm -rf ./bpx-gui"
        rm -rf ./bpx-gui

    - name: Cache GUI
      uses: actions/cache@v3
      id: cache-gui
      with:
        path: .\bpx-gui
        key: ${{ runner.os }}-bpx-gui-${{ steps.gui-ref.outputs.GUI_REF }}

    - if: steps.cache-gui.outputs.cache-hit != 'true'
      name: Build GUI
      continue-on-error: false
      run: |
        cd .\build_scripts
        .\build_windows-1-gui.ps1

    - name: Build Windows installer
      env:
        BPX_INSTALLER_VERSION: ${{ steps.version_number.outputs.BPX_INSTALLER_VERSION }}
      run: |
        $env:path="C:\Program` Files` (x86)\Microsoft` Visual` Studio\2019\Enterprise\SDK\ScopeCppSDK\vc15\VC\bin\;$env:path"
        cd .\build_scripts
        .\build_windows-2-installer.ps1

    - name: Upload Installer to artifacts
      uses: actions/upload-artifact@v3
      with:
        name: bpx-installers-windows-exe-intel
        path: ${{ github.workspace }}\bpx-gui\release-builds\

    - name: Get tag name
      if: startsWith(github.ref, 'refs/tags/')
      id: tag-name
      shell: bash
      run: |
        echo "TAG_NAME=$(echo ${{ github.ref }} | cut -d'/' -f 3)" >>$GITHUB_OUTPUT
        echo "REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f 2)" >>$GITHUB_OUTPUT

    - name: Upload release artifacts
      if: env.RELEASE == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BPX_INSTALLER_VERSION: ${{ steps.version_number.outputs.BPX_INSTALLER_VERSION }}
      run: |
        gh release upload $env:RELEASE_TAG ${{ github.workspace }}\bpx-gui\release-builds\windows-installer\bpx-beacon-client_${{ steps.version_number.outputs.BPX_INSTALLER_VERSION }}_amd64.exe

    - name: Remove Windows exe and installer to exclude from cache
      run: |
        Remove-Item .\bpx-gui\packages\gui\dist -Recurse -Force
        Remove-Item .\bpx-gui\packages\gui\daemon -Recurse -Force
        Remove-Item .\bpx-gui\bpx-gui-win32-x64 -Recurse -Force
        Remove-Item .\bpx-gui\release-builds -Recurse -Force
